# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/mozilla/servo.git',
        workdir='gitpoller-workdir-master', branch='master',
        category='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'git://github.com/mozilla/servo.git',
        workdir='gitpoller-workdir-try', branch='try',
        category='try',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'master' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="master-sched",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["master"]))
c['schedulers'].append(ForceScheduler(
                            name="force-master-sched",
                            builderNames=["master"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="try-sched",
                            change_filter=filter.ChangeFilter(branch='try'),
                            treeStableTimer=None,
                            builderNames=["try"]))
c['schedulers'].append(ForceScheduler(
                            name="force-try-sched",
                            builderNames=["try"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Configure
from buildbot.steps.slave import RemoveDirectory, MakeDirectory

factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git://github.com/mozilla/servo.git',
                    progress=True,
                    mode='update'))
factory.addStep(ShellCommand(name="backup-rust",
                             command=["mv", "obj/src/rust", "."],
                             haltOnFailure=False))
factory.addStep(RemoveDirectory("build/obj"))
factory.addStep(MakeDirectory(dir="build/obj/src"))
factory.addStep(ShellCommand(name="restore-rust",
                             command=["mv", "rust", "obj/src/"],
                             haltOnFailure=False))
factory.addStep(Configure(workdir="build/obj",
                          command="../configure",
                          timeout=3600,
                          haltOnFailure=True))
factory.addStep(ShellCommand(command=["make"],
                             workdir="build/obj"))
factory.addStep(ShellCommand(command=["make", "check"],
                             workdir="build/obj"))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="master",
                  category="master",
                  slavenames=["example-slave"],
                  properties={"branch":"master"},
                  factory=factory))
c['builders'].append(
    BuilderConfig(name="try",
                  category="try",
                  slavenames=["example-slave"],
                  properties={"branch":"try"},
                  factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Servo"
c['titleURL'] = "http://github.com/mozilla/servo"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
